version: '3.8'

services:
  # Game Engine Service with integrated MCP Gateway
  game-engine:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: apex-game-engine
    ports:
      - "8002:8002"  # WebSocket server
      - "8004:8004"  # MCP Gateway
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - WEBSOCKET_PORT=8002
      - MCP_GATEWAY_PORT=8004
      - AI_SERVICE_URL=http://ai-service:8001
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    volumes:
      - ./src:/app/src
      - ./assets:/app/assets
      - ./data:/app/data
      - game_logs:/app/logs
    depends_on:
      - redis
      - ai-service
    networks:
      - apex-network
    restart: unless-stopped

  # AI Service with Ollama
  ai-service:
    build:
      context: .
      dockerfile: docker/ai-service/Dockerfile
    container_name: apex-ai-service
    ports:
      - "8001:8001"
      - "11434:11434"  # Ollama API port
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - GAME_ENGINE_URL=http://game-engine:8002
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    volumes:
      - ./src:/app/src
      - ollama_data:/root/.ollama
      - ai_models:/app/models
      - ai_logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - apex-network
    restart: unless-stopped

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: apex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - game-engine
    networks:
      - apex-network
    restart: unless-stopped
    profiles:
      - production

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: apex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - apex-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # RabbitMQ for message queuing between services
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: apex-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management interface
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - apex-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: apex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - apex-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: apex-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - apex-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  game_logs:
  ai_logs:
  ollama_data:
  ai_models:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  apex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16